Neural Network NÂ°2
==================

----------------------------
 Goal of the neural network
----------------------------

This Neural Network aims at guessing the coordinates of the inner nodes. 
The algorithm takes as input the number of inner nodes approximated by the first neural network,
and the coordinates of the nodes of a cartesian grid that are inside the polygon.


---------------------
 Database generation
---------------------

We need to generate the same polygons as the first neural network, get the number of inner nodes 
generated by gmsh, but also their coordinates. 

^^^^^^^^^^^^^^^^^
Grid Generation
^^^^^^^^^^^^^^^^^

This second neural network works thanks to a cartesian grid of fixed scale.
The size of the elements of the grid is arbitrary, 
but should logically be smaller than the size of the smallest edge.

.. code-block:: python

    Gscale_factor = 0.1
    Gscale = Gscale_factor * ls  # size of mesh grid

The grid should first contain the entire polygon, 
thus its side size should be greater than the maximum distance between two points 
on the horizontal and vertical axis.
However, the polygon is scaled and is always contained in the unit circle. 
It is then more conveignant and faster to keep the unit size 
instead of optimizing a few hundredths every iteration.

.. figure:: images/schemaNN_grid.svg
  :width: 300
  :align: center
  :alt: Schema of the grid with a contour of 7 nodes

  Example of grid for a polygon of 7 nodes  

The grid generation is made by the ``create_grid()`` function.

^^^^^^^^^^^^^^^^^
Inside nodes
^^^^^^^^^^^^^^^^^

Once the grid is generated, we need to find the coordinates of the grid nodes 
that are inside the polygon. 
The function ``is_in_contour`` does it by using the Even-odd rule. 
The algorithm is taken from `this python code <https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule#cite_note-3>`_.

^^^^^^^^^^^^^^^^^
Scores of nodes
^^^^^^^^^^^^^^^^^

Each grid node now has to be graded with a score defined as 
the distance to the closest mesh node. The function ``score_of_node`` gives the score of a given node 
and ``calculate_score_array`` the list of scores for each point of the grid inside the polygon.

---------------------
 Neural Network
---------------------
